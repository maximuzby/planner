{"version":3,"sources":["utils/date-utils.ts","utils/guid-builder.ts","store.ts","use-store.tsx","table/cells/editable-cell.tsx","table/cells/day-cell.tsx","table/cells/person-cell.tsx","table/table.tsx","app.tsx","service-worker.ts","index.tsx"],"names":["dateUtils","date","isoWeekday","guidBuilder","dt","Date","getTime","replace","c","r","Math","random","floor","toString","Entity","types","model","id","optional","identifier","Day","named","props","string","title","views","self","moment","actions","setTitle","Task","name","day","reference","setName","setDay","Person","tasks","array","PlannerStore","people","days","length","addDay","nextDate","add","push","format","addPerson","afterCreate","i","startOf","cast","storeContext","React","createContext","createStore","store","create","makeInspectable","StoreProvider","children","useLocalStore","Provider","value","InlineEditor","setValue","classNamePrefix","onBlur","onChange","useCallback","event","target","useObserver","autoFocus","className","type","EditableCell","useState","editing","setEditing","enableEditing","disableEditing","onClick","DayCell","PersonCell","person","Card","Table","useContext","Error","useStore","map","key","Button","variant","AppContainer","Navbar","fixed","bg","expand","Brand","href","Container","fluid","Row","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.61fab6c1.chunk.js","sourcesContent":["import { Moment } from 'moment';\r\n\r\nconst SATURDAY = 6;\r\n\r\nexport const dateUtils = {\r\n\tisWeekend: (date: Moment) => {\r\n\t\treturn date.isoWeekday() <= SATURDAY;\r\n\t},\r\n};\r\n","const uuidPattern = 'xxxxxxxx-xxxx-4xxx-xxxx-xxxxxxxxxxxx';\r\n\r\nexport const guidBuilder = {\r\n\tbuild: () => {\r\n\t\tlet dt = new Date().getTime();\r\n\t\tconst uuid = uuidPattern.replace(/[xy]/g, c => {\r\n\t\t\t// tslint:disable-next-line:no-bitwise\r\n\t\t\tconst r = (dt + Math.random() * 16) % 16 | 0;\r\n\t\t\tdt = Math.floor(dt / 16);\r\n\t\t\t// tslint:disable-next-line:no-bitwise\r\n\t\t\treturn (c === 'x' ? r : (r & 0x3) | 0x8).toString(16);\r\n\t\t});\r\n\t\treturn uuid;\r\n\t},\r\n};\r\n","import { cast, Instance, types } from 'mobx-state-tree';\r\nimport moment from 'moment';\r\n\r\nimport { dateUtils } from './utils/date-utils';\r\nimport { guidBuilder } from './utils/guid-builder';\r\n\r\nexport interface PlannerStore extends Instance<typeof PlannerStore> {}\r\nexport interface Day extends Instance<typeof Day> {}\r\nexport interface Person extends Instance<typeof Person> {}\r\n\r\nconst Entity = types.model('Entity', {\r\n\tid: types.optional(types.identifier, guidBuilder.build),\r\n});\r\n\r\nexport const Day = Entity.named('Day')\r\n\t.props({\r\n\t\t/** Date in ISO format */\r\n\t\tdate: types.string,\r\n\t\ttitle: types.string,\r\n\t})\r\n\t.views(self => ({\r\n\t\tget isWeekend() {\r\n\t\t\treturn dateUtils.isWeekend(moment(self.date));\r\n\t\t},\r\n\t}))\r\n\t.actions(self => ({\r\n\t\tsetTitle: (title: string) => (self.title = title),\r\n\t}));\r\n\r\nconst Task = Entity.named('Task')\r\n\t.props({\r\n\t\tname: types.string,\r\n\t\tday: types.reference(Day),\r\n\t})\r\n\t.actions(self => ({\r\n\t\tsetName: (name: string) => (self.name = name),\r\n\t\tsetDay: (day: Day) => (self.day = day),\r\n\t}));\r\n\r\nexport const Person = Entity.named('Person')\r\n\t.props({\r\n\t\tname: types.string,\r\n\t\ttasks: types.array(Task),\r\n\t})\r\n\t.actions(self => ({\r\n\t\tsetName: (name: string) => (self.name = name),\r\n\t}));\r\n\r\nexport const PlannerStore = types\r\n\t.model('PlannerApp', {\r\n\t\tpeople: types.array(Person),\r\n\t\tdays: types.array(Day),\r\n\t})\r\n\t.views(self => ({\r\n\t\tget dayCount() {\r\n\t\t\treturn self.days.length;\r\n\t\t},\r\n\t}))\r\n\t.actions(self => ({\r\n\t\taddDay: () => {\r\n\t\t\tconst nextDate = moment(self.days[self.days.length - 1].date).add(\r\n\t\t\t\t1,\r\n\t\t\t\t'day',\r\n\t\t\t);\r\n\t\t\tself.days.push({\r\n\t\t\t\ttitle: nextDate.format('ddd, MMM D'),\r\n\t\t\t\tdate: nextDate.format(),\r\n\t\t\t});\r\n\t\t},\r\n\t\taddPerson: () => {\r\n\t\t\tself.people.push({ name: '' });\r\n\t\t},\r\n\t\tafterCreate: () => {\r\n\t\t\tfor (let i = 0; i < 7; i++) {\r\n\t\t\t\tconst date = moment()\r\n\t\t\t\t\t.startOf('date')\r\n\t\t\t\t\t.add(i, 'day');\r\n\t\t\t\tself.days.push({\r\n\t\t\t\t\ttitle: date.format('ddd, MMM D'),\r\n\t\t\t\t\tdate: date.format(),\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tself.people = cast([\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'Vasya',\r\n\t\t\t\t\ttasks: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'Vasya Busy',\r\n\t\t\t\t\t\t\tday: self.days[0].id,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t],\r\n\t\t\t\t},\r\n\t\t\t\t{ name: 'Petya' },\r\n\t\t\t]);\r\n\t\t},\r\n\t}));\r\n","import makeInspectable from 'mobx-devtools-mst';\r\nimport { useLocalStore } from 'mobx-react-lite';\r\nimport React from 'react';\r\n\r\nimport { PlannerStore } from './store';\r\n\r\nconst storeContext = React.createContext<PlannerStore | null>(null);\r\n\r\ninterface StoreProviderProps {\r\n\tchildren: JSX.Element;\r\n}\r\n\r\nfunction createStore() {\r\n\tconst store = PlannerStore.create({});\r\n\tmakeInspectable(store);\r\n\treturn store;\r\n}\r\n\r\nexport const StoreProvider = ({ children }: StoreProviderProps) => {\r\n\tconst store = useLocalStore(createStore);\r\n\treturn (\r\n\t\t<storeContext.Provider value={store}>{children}</storeContext.Provider>\r\n\t);\r\n};\r\n\r\nexport const useStore = () => {\r\n\tconst store = React.useContext(storeContext);\r\n\tif (!store) {\r\n\t\t// this is especially useful in TypeScript so you don't need to be checking for null all the time\r\n\t\tthrow new Error('You have forgot to use StoreProvider, shame on you.');\r\n\t}\r\n\treturn store;\r\n};\r\n","import { useObserver } from 'mobx-react-lite';\r\nimport React, { useCallback, useState } from 'react';\r\n\r\ninterface EditableCellProps {\r\n\tvalue: string;\r\n\tsetValue: (value: string) => void;\r\n\tclassNamePrefix: string;\r\n}\r\n\r\nconst InlineEditor = (props: EditableCellProps & { onBlur: () => void }) => {\r\n\tconst { setValue, value, classNamePrefix, onBlur } = props;\r\n\r\n\tconst onChange = useCallback(\r\n\t\t(event: React.ChangeEvent<HTMLInputElement>) => {\r\n\t\t\tsetValue(event.target.value);\r\n\t\t},\r\n\t\t[setValue],\r\n\t);\r\n\r\n\treturn useObserver(() => (\r\n\t\t<input\r\n\t\t\tautoFocus={true}\r\n\t\t\tonBlur={onBlur}\r\n\t\t\tclassName={`${classNamePrefix}-cell-editor`}\r\n\t\t\tvalue={value}\r\n\t\t\ttype='text'\r\n\t\t\tonChange={onChange}\r\n\t\t/>\r\n\t));\r\n};\r\n\r\nexport const EditableCell = (props: EditableCellProps) => {\r\n\tconst [editing, setEditing] = useState(false);\r\n\r\n\tconst enableEditing = useCallback(() => {\r\n\t\tsetEditing(true);\r\n\t}, []);\r\n\r\n\tconst disableEditing = useCallback(() => {\r\n\t\tsetEditing(false);\r\n\t}, []);\r\n\r\n\treturn useObserver(() => (\r\n\t\t<th\r\n\t\t\tclassName={`planner-cell planner-cell_header ${props.classNamePrefix}-cell`}\r\n\t\t\tonClick={enableEditing}\r\n\t\t>\r\n\t\t\t{editing ? (\r\n\t\t\t\t<InlineEditor {...props} onBlur={disableEditing} />\r\n\t\t\t) : (\r\n\t\t\t\t<div className={`${props.classNamePrefix}-cell-text`}>\r\n\t\t\t\t\t{props.value}\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t</th>\r\n\t));\r\n};\r\n","import { useObserver } from 'mobx-react-lite';\r\nimport React from 'react';\r\n\r\nimport { Day } from '../../store';\r\nimport './day-cell.css';\r\nimport { EditableCell } from './editable-cell';\r\n\r\nexport const DayCell = (props: { day: Day }) => {\r\n\treturn useObserver(() => (\r\n\t\t<EditableCell\r\n\t\t\tvalue={props.day.title}\r\n\t\t\tsetValue={props.day.setTitle}\r\n\t\t\tclassNamePrefix='day'\r\n\t\t/>\r\n\t));\r\n};\r\n","import { useObserver } from 'mobx-react-lite';\r\nimport React from 'react';\r\n\r\nimport { Person } from '../../store';\r\nimport { EditableCell } from './editable-cell';\r\nimport './person-cell.css';\r\n\r\nexport const PersonCell = (props: { person: Person }) => {\r\n\tconst person = props.person;\r\n\treturn useObserver(() => (\r\n\t\t<EditableCell\r\n\t\t\tvalue={person.name}\r\n\t\t\tsetValue={person.setName}\r\n\t\t\tclassNamePrefix='person'\r\n\t\t/>\r\n\t));\r\n};\r\n","import { useObserver } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nimport { Day, Person } from '../store';\r\nimport { useStore } from '../use-store';\r\nimport { DayCell } from './cells/day-cell';\r\nimport { PersonCell } from './cells/person-cell';\r\nimport './table.css';\r\n\r\nconst Card = (props: { day: Day; person: Person }) => {\r\n\treturn (\r\n\t\t<td className='planner-cell planner-cell_task'>\r\n\t\t\t<div className='planner-card'>{`Free`}</div>\r\n\t\t</td>\r\n\t);\r\n};\r\n\r\nexport const Table = () => {\r\n\tconst store = useStore();\r\n\r\n\treturn useObserver(() => (\r\n\t\t<table className='planner-table'>\r\n\t\t\t<tbody>\r\n\t\t\t\t<tr className='planner-table__header'>\r\n\t\t\t\t\t<th className='planner-cell planner-cell_header' />\r\n\t\t\t\t\t{store.days.map(day => (\r\n\t\t\t\t\t\t<DayCell key={day.id} day={day} />\r\n\t\t\t\t\t))}\r\n\t\t\t\t\t<th className='planner-cell planner-cell_add'>\r\n\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\tvariant='primary'\r\n\t\t\t\t\t\t\tonClick={store.addDay}\r\n\t\t\t\t\t\t\ttitle='Add Day'\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tAdd\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</th>\r\n\t\t\t\t</tr>\r\n\t\t\t\t{store.people.map(person => (\r\n\t\t\t\t\t<tr className='planner-table__row' key={person.id}>\r\n\t\t\t\t\t\t<PersonCell person={person} />\r\n\t\t\t\t\t\t{store.days.map(day => (\r\n\t\t\t\t\t\t\t<Card key={day.id} day={day} person={person} />\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t))}\r\n\t\t\t\t<tr className='planner-table__row'>\r\n\t\t\t\t\t<td className='planner-cell planner-cell_add'>\r\n\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\tvariant='primary'\r\n\t\t\t\t\t\t\tonClick={store.addPerson}\r\n\t\t\t\t\t\t\ttitle='Add Person'\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tAdd\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t</tr>\r\n\t\t\t</tbody>\r\n\t\t</table>\r\n\t));\r\n};\r\n","import React from 'react';\n\nimport { Container, Navbar, Row } from 'react-bootstrap';\nimport { Table } from './table/table';\nimport { StoreProvider } from './use-store';\n\nconst AppContainer: React.FC = props => {\n\treturn (\n\t\t<>\n\t\t\t<Navbar fixed='top' bg='dark' variant='dark' expand='lg'>\n\t\t\t\t<Navbar.Brand href='#home'>Planner</Navbar.Brand>\n\t\t\t</Navbar>\n\t\t\t<Container fluid={true}>\n\t\t\t\t<Row>{props.children}</Row>\n\t\t\t</Container>\n\t\t</>\n\t);\n};\n\nexport const App: React.FC = () => {\n\treturn (\n\t\t<StoreProvider>\n\t\t\t<AppContainer>\n\t\t\t\t<Table />\n\t\t\t</AppContainer>\n\t\t</StoreProvider>\n\t);\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === '[::1]' ||\n\t\t// 127.0.0.1/8 is considered localhost for IPv4.\n\t\twindow.location.hostname.match(\n\t\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n\t\t),\n);\n\ninterface Config {\n\tonSuccess?: (registration: ServiceWorkerRegistration) => void;\n\tonUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config?: Config) {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(\n\t\t\t(process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n\t\t\twindow.location.href,\n\t\t);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t\t\t'worker. To learn more, visit https://bit.ly/CRA-PWA',\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then(registration => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated pre-cached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\n\t\t\t\t\t\t\t\t\t'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been pre-cached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl)\n\t\t.then(response => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get('content-type');\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\t(contentType != null &&\n\t\t\t\t\tcontentType.indexOf('javascript') === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log(\n\t\t\t\t'No internet connection found. App is running in offline mode.',\n\t\t\t);\n\t\t});\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\tregistration.unregister();\n\t\t});\n\t}\n}\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './app';\nimport './index.css';\nimport * as serviceWorker from './service-worker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}