{"version":3,"sources":["utils/date-utils.ts","utils/guid-builder.ts","stores/entity.ts","stores/day.ts","stores/person.ts","stores/task.ts","stores/planner-store.ts","use-store.tsx","table/cells/cell.tsx","table/cells/editable-cell.tsx","table/cells/day-cell.tsx","table/cells/person-cell.tsx","table/table.tsx","app.tsx","service-worker.ts","index.tsx"],"names":["dateUtils","date","isoWeekday","guidBuilder","dt","Date","getTime","replace","c","r","Math","random","floor","toString","Entity","types","model","id","optional","identifier","Day","named","props","string","title","views","self","moment","actions","setTitle","Person","name","setName","Task","startDay","number","person","reference","length","starts","dayIndex","finishes","finishDay","inDay","intersects","task","moveTo","fromDay","toDay","increaseLength","decreaseLength","getParentOfType","PlannerStore","removeTask","people","array","days","tasks","getPersonTasks","placedTasks","sort","a","b","position","find","x","push","getTaskPlacements","filter","detach","addDay","nextDate","add","format","addTask","create","addPerson","afterCreate","i","startOf","cast","storeContext","React","createContext","createStore","store","makeInspectable","StoreProvider","children","useLocalStore","Provider","value","useStore","useContext","Error","TaskCard","useDrag","item","type","fromIndex","collect","monitor","isDragging","drag","useObserver","ref","style","opacity","className","ButtonGroup","Button","size","variant","onClick","EmptyCard","TaskCardList","taskPlacements","maxPosition","max","map","Array","fill","_","placement","key","Cell","useDrop","accept","drop","onFreeClick","useCallback","InlineEditor","setValue","classNamePrefix","onBlur","onChange","event","target","autoFocus","EditableCell","useState","editing","setEditing","enableEditing","disableEditing","DayCell","day","PersonCell","Table","backend","Html5Backend","_day","index","AppContainer","Navbar","fixed","bg","expand","Brand","href","Container","fluid","Row","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.293d9d1e.chunk.js","sourcesContent":["import { Moment } from 'moment';\r\n\r\nconst SATURDAY = 6;\r\n\r\nexport const dateUtils = {\r\n\tisWeekend: (date: Moment) => {\r\n\t\treturn date.isoWeekday() <= SATURDAY;\r\n\t},\r\n};\r\n","const uuidPattern = 'xxxxxxxx-xxxx-4xxx-xxxx-xxxxxxxxxxxx';\r\n\r\nexport const guidBuilder = {\r\n\tbuild: () => {\r\n\t\tlet dt = new Date().getTime();\r\n\t\tconst uuid = uuidPattern.replace(/[xy]/g, c => {\r\n\t\t\t// tslint:disable-next-line:no-bitwise\r\n\t\t\tconst r = (dt + Math.random() * 16) % 16 | 0;\r\n\t\t\tdt = Math.floor(dt / 16);\r\n\t\t\t// tslint:disable-next-line:no-bitwise\r\n\t\t\treturn (c === 'x' ? r : (r & 0x3) | 0x8).toString(16);\r\n\t\t});\r\n\t\treturn uuid;\r\n\t},\r\n};\r\n","import { types } from 'mobx-state-tree';\r\n\r\nimport { guidBuilder } from '../utils/guid-builder';\r\n\r\nexport const Entity = types.model('Entity', {\r\n\tid: types.optional(types.identifier, guidBuilder.build),\r\n});\r\n","import { Instance, types } from 'mobx-state-tree';\r\nimport moment from 'moment';\r\n\r\nimport { dateUtils } from '../utils/date-utils';\r\nimport { Entity } from './entity';\r\n\r\nexport interface Day extends Instance<typeof Day> {}\r\n\r\nexport const Day = Entity.named('Day')\r\n\t.props({\r\n\t\t/** Date in ISO format */\r\n\t\tdate: types.string,\r\n\t\ttitle: types.string,\r\n\t})\r\n\t.views(self => ({\r\n\t\tget isWeekend() {\r\n\t\t\treturn dateUtils.isWeekend(moment(self.date));\r\n\t\t},\r\n\t}))\r\n\t.actions(self => ({\r\n\t\tsetTitle: (title: string) => (self.title = title),\r\n\t}));\r\n","import { Instance, types } from 'mobx-state-tree';\r\n\r\nimport { Entity } from './entity';\r\n\r\nexport interface Person extends Instance<typeof Person> {}\r\n\r\nexport const Person = Entity.named('Person')\r\n\t.props({\r\n\t\tname: types.string,\r\n\t})\r\n\r\n\t.actions(self => ({\r\n\t\tsetName: (name: string) => (self.name = name),\r\n\t}));\r\n","import { getParentOfType, Instance, types } from 'mobx-state-tree';\r\n\r\nimport { Entity } from './entity';\r\nimport { Person } from './person';\r\nimport { PlannerStore } from './planner-store';\r\n\r\nexport interface Task extends Instance<typeof Task> {}\r\n\r\nexport const Task = Entity.named('Task')\r\n\t.props({\r\n\t\tname: types.string,\r\n\t\tstartDay: types.number,\r\n\t\tperson: types.reference(Person),\r\n\t\tlength: types.optional(types.number, 1),\r\n\t})\r\n\t.views(self => ({\r\n\t\tget finishDay(): number {\r\n\t\t\treturn self.startDay + self.length - 1;\r\n\t\t},\r\n\t}))\r\n\t.views(self => ({\r\n\t\tstarts: (dayIndex: number) => {\r\n\t\t\treturn self.startDay === dayIndex;\r\n\t\t},\r\n\t\tfinishes: (dayIndex: number) => {\r\n\t\t\treturn self.finishDay === dayIndex;\r\n\t\t},\r\n\t\tinDay: (dayIndex: number) => {\r\n\t\t\treturn dayIndex >= self.startDay && dayIndex <= self.finishDay;\r\n\t\t},\r\n\t\tintersects: (task: Task): boolean => {\r\n\t\t\treturn (\r\n\t\t\t\t(self.startDay >= task.startDay &&\r\n\t\t\t\t\tself.startDay <= task.finishDay) ||\r\n\t\t\t\t(self.finishDay >= task.startDay &&\r\n\t\t\t\t\tself.finishDay <= task.finishDay) ||\r\n\t\t\t\t(task.startDay >= self.startDay &&\r\n\t\t\t\t\ttask.startDay <= self.finishDay) ||\r\n\t\t\t\t(task.finishDay >= self.startDay &&\r\n\t\t\t\t\ttask.finishDay <= self.finishDay)\r\n\t\t\t);\r\n\t\t},\r\n\t}))\r\n\t.actions(self => ({\r\n\t\tsetName: (name: string) => (self.name = name),\r\n\t\tmoveTo: (fromDay: number, toDay: number, person: Person) => {\r\n\t\t\tself.startDay = self.startDay + (toDay - fromDay);\r\n\t\t\tself.person = person;\r\n\t\t},\r\n\t\tincreaseLength: () => self.length++,\r\n\t\tdecreaseLength: () => {\r\n\t\t\tif (self.length > 1) {\r\n\t\t\t\tself.length--;\r\n\t\t\t} else {\r\n\t\t\t\tgetParentOfType(self, PlannerStore).removeTask(self as Task);\r\n\t\t\t}\r\n\t\t},\r\n\t}));\r\n","import { cast, detach, Instance, types } from 'mobx-state-tree';\r\nimport moment from 'moment';\r\n\r\nimport { Day } from './day';\r\nimport { Person } from './person';\r\nimport { Task } from './task';\r\n\r\nexport interface PlannerStore extends Instance<typeof PlannerStore> {}\r\n\r\nexport interface TaskPlacement {\r\n\tposition: number;\r\n\ttask: Task;\r\n}\r\n\r\nconst getTaskPlacements = (tasks: Task[]) => {\r\n\tconst placedTasks: TaskPlacement[] = [];\r\n\ttasks.sort((a, b) => a.startDay - b.startDay);\r\n\tfor (const task of tasks) {\r\n\t\tlet position = 0;\r\n\t\twhile (\r\n\t\t\tplacedTasks.find(\r\n\t\t\t\tx => x.position === position && x.task.intersects(task),\r\n\t\t\t)\r\n\t\t) {\r\n\t\t\tposition++;\r\n\t\t}\r\n\t\tplacedTasks.push({ task, position });\r\n\t}\r\n\treturn placedTasks;\r\n};\r\n\r\nexport const PlannerStore = types\r\n\t.model('PlannerApp', {\r\n\t\tpeople: types.array(Person),\r\n\t\tdays: types.array(Day),\r\n\t\ttasks: types.array(Task),\r\n\t})\r\n\t.views(self => ({\r\n\t\tgetPersonTasks: (person: Person): TaskPlacement[] => {\r\n\t\t\treturn getTaskPlacements(\r\n\t\t\t\tself.tasks.filter(x => x.person === person),\r\n\t\t\t);\r\n\t\t},\r\n\t}))\r\n\t.views(self => ({\r\n\t\tgetTaskPlacements: (dayIndex: number, person: Person) => {\r\n\t\t\treturn self\r\n\t\t\t\t.getPersonTasks(person)\r\n\t\t\t\t.filter(x => x.task.inDay(dayIndex));\r\n\t\t},\r\n\t}))\r\n\t.actions(self => ({\r\n\t\tremoveTask: (task: Task) => {\r\n\t\t\tdetach(task);\r\n\t\t},\r\n\t\taddDay: () => {\r\n\t\t\tconst nextDate = moment(self.days[self.days.length - 1].date).add(\r\n\t\t\t\t1,\r\n\t\t\t\t'day',\r\n\t\t\t);\r\n\t\t\tself.days.push({\r\n\t\t\t\ttitle: nextDate.format('ddd, MMM D'),\r\n\t\t\t\tdate: nextDate.format(),\r\n\t\t\t});\r\n\t\t},\r\n\t\taddTask: (dayIndex: number, person: Person) => {\r\n\t\t\tself.tasks.push(\r\n\t\t\t\tTask.create({\r\n\t\t\t\t\tperson: person.id,\r\n\t\t\t\t\tstartDay: dayIndex,\r\n\t\t\t\t\tname: 'Task X',\r\n\t\t\t\t}),\r\n\t\t\t);\r\n\t\t},\r\n\t\taddPerson: () => {\r\n\t\t\tself.people.push({ name: ' ' });\r\n\t\t},\r\n\t\t/** Fill with test data */\r\n\t\tafterCreate: () => {\r\n\t\t\tfor (let i = 0; i < 7; i++) {\r\n\t\t\t\tconst date = moment()\r\n\t\t\t\t\t.startOf('date')\r\n\t\t\t\t\t.add(i, 'day');\r\n\t\t\t\tself.days.push({\r\n\t\t\t\t\ttitle: date.format('ddd, MMM D'),\r\n\t\t\t\t\tdate: date.format(),\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tself.people = cast([\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'John',\r\n\t\t\t\t},\r\n\t\t\t\t{ name: 'Max' },\r\n\t\t\t]);\r\n\r\n\t\t\tself.tasks = cast([\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'Task 1',\r\n\t\t\t\t\tstartDay: 0,\r\n\t\t\t\t\tperson: self.people[0].id,\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'Task 2',\r\n\t\t\t\t\tstartDay: 1,\r\n\t\t\t\t\tperson: self.people[0].id,\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'Task 3',\r\n\t\t\t\t\tstartDay: 1,\r\n\t\t\t\t\tperson: self.people[1].id,\r\n\t\t\t\t},\r\n\t\t\t]);\r\n\t\t},\r\n\t}));\r\n","import makeInspectable from 'mobx-devtools-mst';\r\nimport { useLocalStore } from 'mobx-react-lite';\r\nimport React from 'react';\r\n\r\nimport { PlannerStore } from './stores/planner-store';\r\n\r\nconst storeContext = React.createContext<PlannerStore | null>(null);\r\n\r\ninterface StoreProviderProps {\r\n\tchildren: JSX.Element;\r\n}\r\n\r\nfunction createStore() {\r\n\tconst store = PlannerStore.create({});\r\n\tmakeInspectable(store);\r\n\treturn store;\r\n}\r\n\r\nexport const StoreProvider = ({ children }: StoreProviderProps) => {\r\n\tconst store = useLocalStore(createStore);\r\n\treturn (\r\n\t\t<storeContext.Provider value={store}>{children}</storeContext.Provider>\r\n\t);\r\n};\r\n\r\nexport const useStore = () => {\r\n\tconst store = React.useContext(storeContext);\r\n\tif (!store) {\r\n\t\t// this is especially useful in TypeScript so you don't need to be checking for null all the time\r\n\t\tthrow new Error('You have forgot to use StoreProvider, shame on you.');\r\n\t}\r\n\treturn store;\r\n};\r\n","import { useObserver } from 'mobx-react-lite';\r\nimport React, { useCallback } from 'react';\r\nimport { Button, ButtonGroup } from 'react-bootstrap';\r\nimport { useDrag, useDrop } from 'react-dnd';\r\n\r\nimport { Person } from '../../stores/person';\r\nimport { TaskPlacement } from '../../stores/planner-store';\r\nimport { Task } from '../../stores/task';\r\nimport { useStore } from '../../use-store';\r\n\r\ninterface DropObject {\r\n\ttype: string;\r\n\ttask: Task;\r\n\tfromIndex: number;\r\n}\r\n\r\ninterface TaskCardProps {\r\n\ttask: Task;\r\n\tdayIndex: number;\r\n}\r\n\r\nconst TaskCard = (props: TaskCardProps) => {\r\n\tconst { task, dayIndex } = props;\r\n\r\n\tconst [{ isDragging }, drag] = useDrag({\r\n\t\titem: { task, type: 'card', fromIndex: dayIndex },\r\n\t\tcollect: monitor => ({\r\n\t\t\tisDragging: !!monitor.isDragging(),\r\n\t\t}),\r\n\t});\r\n\r\n\treturn useObserver(() => (\r\n\t\t<div\r\n\t\t\tref={drag}\r\n\t\t\tstyle={{ opacity: isDragging ? 0.5 : 1 }}\r\n\t\t\tclassName={`planner-card card-task ${task.starts(dayIndex) &&\r\n\t\t\t\t'task-start'} ${task.finishes(dayIndex) && 'task-finish'}`}\r\n\t\t>\r\n\t\t\t{task.name}\r\n\t\t\t{` `}\r\n\t\t\t<ButtonGroup>\r\n\t\t\t\t<Button\r\n\t\t\t\t\tsize='sm'\r\n\t\t\t\t\tvariant='primary'\r\n\t\t\t\t\tonClick={task.increaseLength}\r\n\t\t\t\t>\r\n\t\t\t\t\t+\r\n\t\t\t\t</Button>\r\n\t\t\t\t<Button\r\n\t\t\t\t\tsize='sm'\r\n\t\t\t\t\tvariant='primary'\r\n\t\t\t\t\tonClick={task.decreaseLength}\r\n\t\t\t\t>\r\n\t\t\t\t\t-\r\n\t\t\t\t</Button>\r\n\t\t\t</ButtonGroup>\r\n\t\t</div>\r\n\t));\r\n};\r\n\r\nconst EmptyCard = () => {\r\n\treturn <div className='planner-card empty-card'>{``}</div>;\r\n};\r\n\r\nconst TaskCardList = (props: {\r\n\ttaskPlacements: TaskPlacement[];\r\n\tdayIndex: number;\r\n}) => {\r\n\tconst { taskPlacements, dayIndex } = props;\r\n\r\n\tconst maxPosition = Math.max(...taskPlacements.map(x => x.position));\r\n\tconst array = Array(maxPosition + 1)\r\n\t\t.fill(null)\r\n\t\t.map((_, i) => {\r\n\t\t\treturn taskPlacements.find(x => x.position === i);\r\n\t\t});\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{array.map((placement, i) =>\r\n\t\t\t\tplacement ? (\r\n\t\t\t\t\t<TaskCard\r\n\t\t\t\t\t\tdayIndex={dayIndex}\r\n\t\t\t\t\t\ttask={placement.task}\r\n\t\t\t\t\t\tkey={i}\r\n\t\t\t\t\t/>\r\n\t\t\t\t) : (\r\n\t\t\t\t\t<EmptyCard key={i} />\r\n\t\t\t\t),\r\n\t\t\t)}\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport const Cell = (props: { dayIndex: number; person: Person }) => {\r\n\tconst { dayIndex, person } = props;\r\n\tconst [, drop] = useDrop<DropObject, {}, {}>({\r\n\t\taccept: 'card',\r\n\t\tdrop: (item: DropObject) => {\r\n\t\t\titem.task.moveTo(item.fromIndex, props.dayIndex, props.person);\r\n\t\t\treturn {};\r\n\t\t},\r\n\t});\r\n\r\n\tconst store = useStore();\r\n\r\n\tconst onFreeClick = useCallback(() => {\r\n\t\tstore.addTask(dayIndex, person);\r\n\t}, [dayIndex, person, store]);\r\n\r\n\treturn useObserver(() => {\r\n\t\tconst taskPlacements = store.getTaskPlacements(\r\n\t\t\tprops.dayIndex,\r\n\t\t\tprops.person,\r\n\t\t);\r\n\r\n\t\treturn (\r\n\t\t\t<td ref={drop} className='planner-cell planner-cell_task'>\r\n\t\t\t\t{taskPlacements.length === 0 ? (\r\n\t\t\t\t\t<div\r\n\t\t\t\t\t\tclassName='planner-card empty-card'\r\n\t\t\t\t\t\tonClick={onFreeClick}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{`Free`}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t) : (\r\n\t\t\t\t\t<TaskCardList\r\n\t\t\t\t\t\ttaskPlacements={taskPlacements}\r\n\t\t\t\t\t\tdayIndex={dayIndex}\r\n\t\t\t\t\t/>\r\n\t\t\t\t)}\r\n\t\t\t</td>\r\n\t\t);\r\n\t});\r\n};\r\n","import { useObserver } from 'mobx-react-lite';\r\nimport React, { useCallback, useState } from 'react';\r\n\r\ninterface EditableCellProps {\r\n\tvalue: string;\r\n\tsetValue: (value: string) => void;\r\n\tclassNamePrefix: string;\r\n}\r\n\r\nconst InlineEditor = (props: EditableCellProps & { onBlur: () => void }) => {\r\n\tconst { setValue, value, classNamePrefix, onBlur } = props;\r\n\r\n\tconst onChange = useCallback(\r\n\t\t(event: React.ChangeEvent<HTMLInputElement>) => {\r\n\t\t\tsetValue(event.target.value);\r\n\t\t},\r\n\t\t[setValue],\r\n\t);\r\n\r\n\treturn useObserver(() => (\r\n\t\t<input\r\n\t\t\tautoFocus={true}\r\n\t\t\tonBlur={onBlur}\r\n\t\t\tclassName={`${classNamePrefix}-cell-editor`}\r\n\t\t\tvalue={value}\r\n\t\t\ttype='text'\r\n\t\t\tonChange={onChange}\r\n\t\t/>\r\n\t));\r\n};\r\n\r\nexport const EditableCell = (props: EditableCellProps) => {\r\n\tconst [editing, setEditing] = useState(false);\r\n\r\n\tconst enableEditing = useCallback(() => {\r\n\t\tsetEditing(true);\r\n\t}, []);\r\n\r\n\tconst disableEditing = useCallback(() => {\r\n\t\tsetEditing(false);\r\n\t}, []);\r\n\r\n\treturn useObserver(() => (\r\n\t\t<th\r\n\t\t\tclassName={`planner-cell planner-cell_header ${props.classNamePrefix}-cell`}\r\n\t\t\tonClick={enableEditing}\r\n\t\t>\r\n\t\t\t{editing ? (\r\n\t\t\t\t<InlineEditor {...props} onBlur={disableEditing} />\r\n\t\t\t) : (\r\n\t\t\t\t<div className={`${props.classNamePrefix}-cell-text`}>\r\n\t\t\t\t\t{props.value}\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t</th>\r\n\t));\r\n};\r\n","import { useObserver } from 'mobx-react-lite';\r\nimport React from 'react';\r\n\r\nimport { Day } from '../../stores/day';\r\nimport './day-cell.css';\r\nimport { EditableCell } from './editable-cell';\r\n\r\nexport const DayCell = (props: { day: Day }) => {\r\n\treturn useObserver(() => (\r\n\t\t<EditableCell\r\n\t\t\tvalue={props.day.title}\r\n\t\t\tsetValue={props.day.setTitle}\r\n\t\t\tclassNamePrefix='day'\r\n\t\t/>\r\n\t));\r\n};\r\n","import { useObserver } from 'mobx-react-lite';\r\nimport React from 'react';\r\n\r\nimport { Person } from '../../stores/person';\r\nimport { EditableCell } from './editable-cell';\r\nimport './person-cell.css';\r\n\r\nexport const PersonCell = (props: { person: Person }) => {\r\n\tconst person = props.person;\r\n\treturn useObserver(() => (\r\n\t\t<EditableCell\r\n\t\t\tvalue={person.name}\r\n\t\t\tsetValue={person.setName}\r\n\t\t\tclassNamePrefix='person'\r\n\t\t/>\r\n\t));\r\n};\r\n","import { useObserver } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button } from 'react-bootstrap';\r\nimport { DndProvider } from 'react-dnd';\r\nimport Html5Backend from 'react-dnd-html5-backend';\r\n\r\nimport { useStore } from '../use-store';\r\nimport { Cell } from './cells/cell';\r\nimport { DayCell } from './cells/day-cell';\r\nimport { PersonCell } from './cells/person-cell';\r\nimport './table.css';\r\n\r\nexport const Table = () => {\r\n\tconst store = useStore();\r\n\r\n\treturn (\r\n\t\t<DndProvider backend={Html5Backend}>\r\n\t\t\t{useObserver(() => (\r\n\t\t\t\t<table className='planner-table'>\r\n\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t<tr className='planner-table__header'>\r\n\t\t\t\t\t\t\t<th className='planner-cell planner-cell_header' />\r\n\t\t\t\t\t\t\t{store.days.map(day => (\r\n\t\t\t\t\t\t\t\t<DayCell key={day.id} day={day} />\r\n\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t<th className='planner-cell planner-cell_add'>\r\n\t\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\t\tvariant='primary'\r\n\t\t\t\t\t\t\t\t\tonClick={store.addDay}\r\n\t\t\t\t\t\t\t\t\ttitle='Add Day'\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\tAdd\r\n\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t</th>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t{store.people.map(person => (\r\n\t\t\t\t\t\t\t<tr className='planner-table__row' key={person.id}>\r\n\t\t\t\t\t\t\t\t<PersonCell person={person} />\r\n\t\t\t\t\t\t\t\t{store.days.map((_day, index) => (\r\n\t\t\t\t\t\t\t\t\t<Cell\r\n\t\t\t\t\t\t\t\t\t\tkey={index}\r\n\t\t\t\t\t\t\t\t\t\tdayIndex={index}\r\n\t\t\t\t\t\t\t\t\t\tperson={person}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t<tr className='planner-table__row'>\r\n\t\t\t\t\t\t\t<td className='planner-cell planner-cell_add'>\r\n\t\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\t\tvariant='primary'\r\n\t\t\t\t\t\t\t\t\tonClick={store.addPerson}\r\n\t\t\t\t\t\t\t\t\ttitle='Add Person'\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\tAdd\r\n\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t</tbody>\r\n\t\t\t\t</table>\r\n\t\t\t))}\r\n\t\t</DndProvider>\r\n\t);\r\n};\r\n","import React from 'react';\n\nimport { Container, Navbar, Row } from 'react-bootstrap';\nimport { Table } from './table/table';\nimport { StoreProvider } from './use-store';\n\nconst AppContainer: React.FC = props => {\n\treturn (\n\t\t<>\n\t\t\t<Navbar fixed='top' bg='dark' variant='dark' expand='lg'>\n\t\t\t\t<Navbar.Brand href='#home'>Planner</Navbar.Brand>\n\t\t\t</Navbar>\n\t\t\t<Container fluid={true}>\n\t\t\t\t<Row>{props.children}</Row>\n\t\t\t</Container>\n\t\t</>\n\t);\n};\n\nexport const App: React.FC = () => {\n\treturn (\n\t\t<StoreProvider>\n\t\t\t<AppContainer>\n\t\t\t\t<Table />\n\t\t\t</AppContainer>\n\t\t</StoreProvider>\n\t);\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === '[::1]' ||\n\t\t// 127.0.0.1/8 is considered localhost for IPv4.\n\t\twindow.location.hostname.match(\n\t\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n\t\t),\n);\n\ninterface Config {\n\tonSuccess?: (registration: ServiceWorkerRegistration) => void;\n\tonUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config?: Config) {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(\n\t\t\t(process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n\t\t\twindow.location.href,\n\t\t);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t\t\t'worker. To learn more, visit https://bit.ly/CRA-PWA',\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then(registration => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated pre-cached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\n\t\t\t\t\t\t\t\t\t'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been pre-cached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl)\n\t\t.then(response => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get('content-type');\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\t(contentType != null &&\n\t\t\t\t\tcontentType.indexOf('javascript') === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log(\n\t\t\t\t'No internet connection found. App is running in offline mode.',\n\t\t\t);\n\t\t});\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\tregistration.unregister();\n\t\t});\n\t}\n}\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './app';\nimport './index.css';\nimport * as serviceWorker from './service-worker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}