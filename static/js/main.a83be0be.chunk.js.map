{"version":3,"sources":["utils/date-utils.ts","utils/guid-builder.ts","stores/entity.store.ts","stores/day.store.ts","stores/person.store.ts","stores/task.ts","stores/planner.store.ts","stores/views/task-placements.ts","stores/initial-seed.ts","use-store.tsx","table/headers/editable-cell.tsx","table/headers/person-cell.tsx","table/headers/day-cell.tsx","table/days-header.tsx","table/cells/cell.tsx","table/person-tasks-row.tsx","table/table.tsx","table/add-person-button.tsx","task-editor/task-editor.tsx","app.tsx","service-worker.ts","index.tsx"],"names":["dateUtils","date","isoWeekday","guidBuilder","dt","Date","getTime","replace","c","r","Math","random","floor","toString","Entity","types","model","id","optional","identifier","Day","named","props","string","title","views","self","moment","actions","setTitle","Person","name","setName","Task","startDay","number","person","reference","length","starts","dayIndex","finishes","finishDay","inDay","intersects","task","moveTo","fromDay","toDay","increaseLength","decreaseLength","PlannerStore","people","array","days","tasks","selectedTaskId","maybe","find","x","getPersonTasks","filter","sort","a","b","reduce","placedTasks","position","map","free","getTaskPlacements","selectTask","removeTask","undefined","remove","addDay","nextDate","add","push","format","addTask","create","addPerson","afterCreate","i","startOf","cast","seed","storeContext","React","createContext","createStore","store","makeInspectable","StoreProvider","children","useLocalStore","Provider","value","useStore","useContext","Error","InlineEditor","setValue","classNamePrefix","onBlur","onChange","useCallback","event","target","useObserver","autoFocus","className","type","EditableCell","useState","editing","setEditing","enableEditing","disableEditing","onClick","PersonCell","DayCell","day","DaysHeader","key","Button","variant","TaskCard","useDrag","item","fromIndex","collect","monitor","isDragging","drag","onMinusClick","ref","style","opacity","classNames","ButtonGroup","size","EmptyCard","TaskCardList","taskPlacements","maxPosition","max","Array","from","_","placement","index","Cell","useDrop","accept","drop","onFreeClick","PersonTasksRow","_day","TableRows","Table","Row","Col","lg","backend","Html5Backend","AddPersonButton","TaskEditorControls","currentTarget","FormGroup","FormControl","TaskEditor","selectedTask","AppContainer","Navbar","fixed","bg","expand","Brand","href","Container","fluid","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a83be0be.chunk.js","sourcesContent":["import { Moment } from 'moment';\r\n\r\nconst SATURDAY = 6;\r\n\r\nexport const dateUtils = {\r\n\tisWeekend: (date: Moment) => {\r\n\t\treturn date.isoWeekday() <= SATURDAY;\r\n\t},\r\n};\r\n","const uuidPattern = 'xxxxxxxx-xxxx-4xxx-xxxx-xxxxxxxxxxxx';\r\n\r\nexport const guidBuilder = {\r\n\tbuild: () => {\r\n\t\tlet dt = new Date().getTime();\r\n\t\tconst uuid = uuidPattern.replace(/[xy]/g, c => {\r\n\t\t\t// tslint:disable-next-line:no-bitwise\r\n\t\t\tconst r = (dt + Math.random() * 16) % 16 | 0;\r\n\t\t\tdt = Math.floor(dt / 16);\r\n\t\t\t// tslint:disable-next-line:no-bitwise\r\n\t\t\treturn (c === 'x' ? r : (r & 0x3) | 0x8).toString(16);\r\n\t\t});\r\n\t\treturn uuid;\r\n\t},\r\n};\r\n","import { types } from 'mobx-state-tree';\r\n\r\nimport { guidBuilder } from '../utils/guid-builder';\r\n\r\nexport const Entity = types.model('Entity', {\r\n\tid: types.optional(types.identifier, guidBuilder.build),\r\n});\r\n","import { Instance, types } from 'mobx-state-tree';\r\nimport moment from 'moment';\r\n\r\nimport { dateUtils } from '../utils/date-utils';\r\nimport { Entity } from './entity.store';\r\n\r\nexport interface Day extends Instance<typeof Day> {}\r\n\r\nexport const Day = Entity.named('Day')\r\n\t.props({\r\n\t\t/** Date in ISO format */\r\n\t\tdate: types.string,\r\n\t\ttitle: types.string,\r\n\t})\r\n\t.views(self => ({\r\n\t\tget isWeekend() {\r\n\t\t\treturn dateUtils.isWeekend(moment(self.date));\r\n\t\t},\r\n\t}))\r\n\t.actions(self => ({\r\n\t\tsetTitle: (title: string) => (self.title = title),\r\n\t}));\r\n","import { Instance, types } from 'mobx-state-tree';\r\n\r\nimport { Entity } from './entity.store';\r\n\r\nexport interface Person extends Instance<typeof Person> {}\r\n\r\nexport const Person = Entity.named('Person')\r\n\t.props({\r\n\t\tname: types.string,\r\n\t})\r\n\r\n\t.actions(self => ({\r\n\t\tsetName: (name: string) => (self.name = name),\r\n\t}));\r\n","import { Instance, types } from 'mobx-state-tree';\r\n\r\nimport { Entity } from './entity.store';\r\nimport { Person } from './person.store';\r\n\r\nexport interface Task extends Instance<typeof Task> {}\r\n\r\nexport const Task = Entity.named('Task')\r\n\t.props({\r\n\t\tname: types.string,\r\n\t\tstartDay: types.number,\r\n\t\tperson: types.reference(Person),\r\n\t\tlength: types.optional(types.number, 1),\r\n\t})\r\n\t.views(self => ({\r\n\t\tget finishDay(): number {\r\n\t\t\treturn self.startDay + self.length - 1;\r\n\t\t},\r\n\t}))\r\n\t.views(self => ({\r\n\t\tstarts: (dayIndex: number) => {\r\n\t\t\treturn self.startDay === dayIndex;\r\n\t\t},\r\n\t\tfinishes: (dayIndex: number) => {\r\n\t\t\treturn self.finishDay === dayIndex;\r\n\t\t},\r\n\t\tinDay: (dayIndex: number) => {\r\n\t\t\treturn dayIndex >= self.startDay && dayIndex <= self.finishDay;\r\n\t\t},\r\n\t\tintersects: (task: Task): boolean => {\r\n\t\t\treturn (\r\n\t\t\t\t(self.startDay >= task.startDay &&\r\n\t\t\t\t\tself.startDay <= task.finishDay) ||\r\n\t\t\t\t(self.finishDay >= task.startDay &&\r\n\t\t\t\t\tself.finishDay <= task.finishDay) ||\r\n\t\t\t\t(task.startDay >= self.startDay &&\r\n\t\t\t\t\ttask.startDay <= self.finishDay) ||\r\n\t\t\t\t(task.finishDay >= self.startDay &&\r\n\t\t\t\t\ttask.finishDay <= self.finishDay)\r\n\t\t\t);\r\n\t\t},\r\n\t}))\r\n\t.actions(self => ({\r\n\t\tsetName: (name: string) => (self.name = name),\r\n\t\tmoveTo: (fromDay: number, toDay: number, person: Person) => {\r\n\t\t\tself.startDay = self.startDay + (toDay - fromDay);\r\n\t\t\tself.person = person;\r\n\t\t},\r\n\t\tincreaseLength: () => self.length++,\r\n\t\tdecreaseLength: (): boolean => {\r\n\t\t\treturn self.length > 1 ? !!self.length-- : false;\r\n\t\t},\r\n\t}));\r\n","import { Instance, types } from 'mobx-state-tree';\r\nimport moment from 'moment';\r\n\r\nimport { Day } from './day.store';\r\nimport { seed } from './initial-seed';\r\nimport { Person } from './person.store';\r\nimport { Task } from './task';\r\nimport { getTaskPlacements, TaskPlacement } from './views/task-placements';\r\n\r\nexport interface PlannerStoreModel extends Instance<typeof PlannerStoreModel> {}\r\nexport interface PlannerStore extends Instance<typeof PlannerStore> {}\r\n\r\nconst PlannerStoreModel = types.model('PlannerApp', {\r\n\tpeople: types.array(Person),\r\n\tdays: types.array(Day),\r\n\ttasks: types.array(Task),\r\n\tselectedTaskId: types.maybe(types.string),\r\n});\r\n\r\nconst PlannerStoreView = PlannerStoreModel.views(self => ({\r\n\tget selectedTask() {\r\n\t\treturn self.tasks.find(x => x.id === self.selectedTaskId);\r\n\t},\r\n\tgetPersonTasks: (person: Person): TaskPlacement[] => {\r\n\t\treturn getTaskPlacements(self.tasks.filter(x => x.person === person));\r\n\t},\r\n})).views(self => ({\r\n\tgetTaskPlacements: (dayIndex: number, person: Person) => {\r\n\t\treturn self.getPersonTasks(person).filter(x => x.task.inDay(dayIndex));\r\n\t},\r\n}));\r\n\r\nconst PlannerStoreActions = PlannerStoreView.actions(self => ({\r\n\tselectTask: (task: Task) => {\r\n\t\tself.selectedTaskId = task.id;\r\n\t},\r\n\tremoveTask: (task: Task) => {\r\n\t\tif (task.id === self.selectedTaskId) {\r\n\t\t\tself.selectedTaskId = undefined;\r\n\t\t}\r\n\r\n\t\tself.tasks.remove(task);\r\n\t},\r\n\taddDay: () => {\r\n\t\tconst nextDate = moment(self.days[self.days.length - 1].date).add(\r\n\t\t\t1,\r\n\t\t\t'day',\r\n\t\t);\r\n\t\tself.days.push({\r\n\t\t\ttitle: nextDate.format('ddd, MMM D'),\r\n\t\t\tdate: nextDate.format(),\r\n\t\t});\r\n\t},\r\n\taddTask: (dayIndex: number, person: Person) => {\r\n\t\tself.tasks.push(\r\n\t\t\tTask.create({\r\n\t\t\t\tperson: person.id,\r\n\t\t\t\tstartDay: dayIndex,\r\n\t\t\t\tname: 'Task X',\r\n\t\t\t}),\r\n\t\t);\r\n\t},\r\n\taddPerson: () => {\r\n\t\tself.people.push({ name: ' ' });\r\n\t},\r\n\t/** Fill with test data */\r\n\tafterCreate: () => seed(self),\r\n}));\r\n\r\nexport const PlannerStore = PlannerStoreActions;\r\n","import { Task } from '../task';\r\n\r\nexport interface TaskPlacement {\r\n\tposition: number;\r\n\ttask: Task;\r\n}\r\n\r\nexport const getTaskPlacements = (tasks: Task[]) => {\r\n\treturn tasks\r\n\t\t.sort((a, b) => a.startDay - b.startDay)\r\n\t\t.reduce<TaskPlacement[]>((placedTasks, task) => {\r\n\t\t\tconst position = placedTasks\r\n\t\t\t\t.filter(x => x.task.intersects(task))\r\n\t\t\t\t.map(x => x.position)\r\n\t\t\t\t.sort()\r\n\t\t\t\t.reduce((free, x) => (x === free ? free + 1 : free), 0);\r\n\t\t\treturn [...placedTasks, { task, position }];\r\n\t\t}, []);\r\n};\r\n","import { cast } from 'mobx-state-tree';\r\nimport moment from 'moment';\r\n\r\nimport { PlannerStoreModel } from './planner.store';\r\n\r\nexport const seed = (self: PlannerStoreModel) => {\r\n\tfor (let i = 0; i < 7; i++) {\r\n\t\tconst date = moment()\r\n\t\t\t.startOf('date')\r\n\t\t\t.add(i, 'day');\r\n\t\tself.days.push({\r\n\t\t\ttitle: date.format('ddd, MMM D'),\r\n\t\t\tdate: date.format(),\r\n\t\t});\r\n\t}\r\n\r\n\tself.people = cast([\r\n\t\t{\r\n\t\t\tname: 'John',\r\n\t\t},\r\n\t\t{ name: 'Max' },\r\n\t]);\r\n\r\n\tself.tasks = cast([\r\n\t\t{\r\n\t\t\tname: 'Task 1',\r\n\t\t\tstartDay: 0,\r\n\t\t\tperson: self.people[0].id,\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'Task 2',\r\n\t\t\tstartDay: 1,\r\n\t\t\tperson: self.people[0].id,\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'Task 3',\r\n\t\t\tstartDay: 1,\r\n\t\t\tperson: self.people[1].id,\r\n\t\t},\r\n\t]);\r\n};\r\n","import makeInspectable from 'mobx-devtools-mst';\r\nimport { useLocalStore } from 'mobx-react-lite';\r\nimport React from 'react';\r\n\r\nimport { PlannerStore } from './stores/planner.store';\r\n\r\nconst storeContext = React.createContext<PlannerStore | null>(null);\r\n\r\ninterface StoreProviderProps {\r\n\tchildren: JSX.Element;\r\n}\r\n\r\nfunction createStore() {\r\n\tconst store = PlannerStore.create({});\r\n\tmakeInspectable(store);\r\n\treturn store;\r\n}\r\n\r\nexport const StoreProvider = ({ children }: StoreProviderProps) => {\r\n\tconst store = useLocalStore(createStore);\r\n\treturn (\r\n\t\t<storeContext.Provider value={store}>{children}</storeContext.Provider>\r\n\t);\r\n};\r\n\r\nexport const useStore = () => {\r\n\tconst store = React.useContext(storeContext);\r\n\tif (!store) {\r\n\t\t// this is especially useful in TypeScript so you don't need to be checking for null all the time\r\n\t\tthrow new Error('You have forgot to use StoreProvider, shame on you.');\r\n\t}\r\n\treturn store;\r\n};\r\n","import { useObserver } from 'mobx-react-lite';\r\nimport React, { useCallback, useState } from 'react';\r\n\r\ninterface EditableCellProps {\r\n\tvalue: string;\r\n\tsetValue: (value: string) => void;\r\n\tclassNamePrefix: string;\r\n}\r\n\r\nconst InlineEditor = (props: EditableCellProps & { onBlur: () => void }) => {\r\n\tconst { setValue, value, classNamePrefix, onBlur } = props;\r\n\r\n\tconst onChange = useCallback(\r\n\t\t(event: React.ChangeEvent<HTMLInputElement>) => {\r\n\t\t\tsetValue(event.target.value);\r\n\t\t},\r\n\t\t[setValue],\r\n\t);\r\n\r\n\treturn useObserver(() => (\r\n\t\t<input\r\n\t\t\tautoFocus={true}\r\n\t\t\tonBlur={onBlur}\r\n\t\t\tclassName={`${classNamePrefix}-cell-editor`}\r\n\t\t\tvalue={value}\r\n\t\t\ttype='text'\r\n\t\t\tonChange={onChange}\r\n\t\t/>\r\n\t));\r\n};\r\n\r\nexport const EditableCell = (props: EditableCellProps) => {\r\n\tconst [editing, setEditing] = useState(false);\r\n\r\n\tconst enableEditing = useCallback(() => {\r\n\t\tsetEditing(true);\r\n\t}, []);\r\n\r\n\tconst disableEditing = useCallback(() => {\r\n\t\tsetEditing(false);\r\n\t}, []);\r\n\r\n\treturn useObserver(() => (\r\n\t\t<th\r\n\t\t\tclassName={`planner-cell planner-cell_header ${props.classNamePrefix}-cell`}\r\n\t\t\tonClick={enableEditing}\r\n\t\t>\r\n\t\t\t{editing ? (\r\n\t\t\t\t<InlineEditor {...props} onBlur={disableEditing} />\r\n\t\t\t) : (\r\n\t\t\t\t<div className={`${props.classNamePrefix}-cell-text`}>\r\n\t\t\t\t\t{props.value}\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t</th>\r\n\t));\r\n};\r\n","import { useObserver } from 'mobx-react-lite';\r\nimport React from 'react';\r\n\r\nimport { Person } from '../../stores';\r\nimport { EditableCell } from './editable-cell';\r\n\r\nimport './person-cell.css';\r\n\r\nexport const PersonCell = (props: { person: Person }) => {\r\n\tconst person = props.person;\r\n\treturn useObserver(() => (\r\n\t\t<EditableCell\r\n\t\t\tvalue={person.name}\r\n\t\t\tsetValue={person.setName}\r\n\t\t\tclassNamePrefix='person'\r\n\t\t/>\r\n\t));\r\n};\r\n","import { useObserver } from 'mobx-react-lite';\r\nimport React from 'react';\r\n\r\nimport { Day } from '../../stores';\r\nimport { EditableCell } from './editable-cell';\r\n\r\nimport './day-cell.css';\r\n\r\nexport const DayCell = (props: { day: Day }) => {\r\n\treturn useObserver(() => (\r\n\t\t<EditableCell\r\n\t\t\tvalue={props.day.title}\r\n\t\t\tsetValue={props.day.setTitle}\r\n\t\t\tclassNamePrefix='day'\r\n\t\t/>\r\n\t));\r\n};\r\n","import { useObserver } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nimport { useStore } from '../use-store';\r\nimport { DayCell } from './headers';\r\n\r\nexport const DaysHeader = () => {\r\n\tconst store = useStore();\r\n\r\n\treturn useObserver(() => (\r\n\t\t<tr className='planner-table__header'>\r\n\t\t\t<th className='planner-cell planner-cell_header' />\r\n\t\t\t{store.days.map(day => (\r\n\t\t\t\t<DayCell key={day.id} day={day} />\r\n\t\t\t))}\r\n\t\t\t<th className='planner-cell planner-cell_add'>\r\n\t\t\t\t<Button\r\n\t\t\t\t\tvariant='primary'\r\n\t\t\t\t\tonClick={store.addDay}\r\n\t\t\t\t\ttitle='Add Day'\r\n\t\t\t\t>\r\n\t\t\t\t\tAdd Day\r\n\t\t\t\t</Button>\r\n\t\t\t</th>\r\n\t\t</tr>\r\n\t));\r\n};\r\n","import classNames from 'classnames';\r\nimport { useObserver } from 'mobx-react-lite';\r\nimport React, { useCallback } from 'react';\r\nimport { Button, ButtonGroup } from 'react-bootstrap';\r\nimport { useDrag, useDrop } from 'react-dnd';\r\n\r\nimport { Person, Task, TaskPlacement } from '../../stores';\r\nimport { useStore } from '../../use-store';\r\n\r\ninterface DropObject {\r\n\ttype: string;\r\n\ttask: Task;\r\n\tfromIndex: number;\r\n}\r\n\r\ninterface TaskCardProps {\r\n\ttask: Task;\r\n\tdayIndex: number;\r\n}\r\n\r\nconst TaskCard = (props: TaskCardProps) => {\r\n\tconst { task, dayIndex } = props;\r\n\r\n\tconst store = useStore();\r\n\r\n\tconst [{ isDragging }, drag] = useDrag({\r\n\t\titem: { task, type: 'card', fromIndex: dayIndex },\r\n\t\tcollect: monitor => ({\r\n\t\t\tisDragging: !!monitor.isDragging(),\r\n\t\t}),\r\n\t});\r\n\r\n\tconst onClick = () => {\r\n\t\tstore.selectTask(task);\r\n\t};\r\n\r\n\tconst onMinusClick = () => {\r\n\t\tif (!task.decreaseLength()) {\r\n\t\t\tstore.removeTask(task);\r\n\t\t}\r\n\t};\r\n\r\n\treturn useObserver(() => (\r\n\t\t<div\r\n\t\t\tref={drag}\r\n\t\t\tstyle={{ opacity: isDragging ? 0.5 : 1 }}\r\n\t\t\tclassName={classNames('planner-card', 'card-task', {\r\n\t\t\t\t'task-start': task.starts(dayIndex),\r\n\t\t\t\t'task-finish': task.finishes(dayIndex),\r\n\t\t\t\t'task-selected': store.selectedTaskId === task.id,\r\n\t\t\t})}\r\n\t\t\tonClick={onClick}\r\n\t\t>\r\n\t\t\t{task.name}\r\n\t\t\t{` `}\r\n\t\t\t<ButtonGroup className='task-length-buttons'>\r\n\t\t\t\t<Button\r\n\t\t\t\t\tsize='sm'\r\n\t\t\t\t\tvariant='outline-warning'\r\n\t\t\t\t\tonClick={task.increaseLength}\r\n\t\t\t\t>\r\n\t\t\t\t\t+\r\n\t\t\t\t</Button>\r\n\t\t\t\t<Button\r\n\t\t\t\t\tsize='sm'\r\n\t\t\t\t\tvariant='outline-warning'\r\n\t\t\t\t\tonClick={onMinusClick}\r\n\t\t\t\t>\r\n\t\t\t\t\t-\r\n\t\t\t\t</Button>\r\n\t\t\t</ButtonGroup>\r\n\t\t</div>\r\n\t));\r\n};\r\n\r\nconst EmptyCard = () => {\r\n\treturn <div className='planner-card empty-card'>{``}</div>;\r\n};\r\n\r\nconst TaskCardList = (props: {\r\n\ttaskPlacements: TaskPlacement[];\r\n\tdayIndex: number;\r\n}) => {\r\n\tconst { taskPlacements, dayIndex } = props;\r\n\r\n\tconst maxPosition = Math.max(...taskPlacements.map(x => x.position));\r\n\tconst array = Array.from({ length: maxPosition + 1 }, (_, i) => {\r\n\t\treturn taskPlacements.find(x => x.position === i);\r\n\t});\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{array.map((placement, index) =>\r\n\t\t\t\tplacement ? (\r\n\t\t\t\t\t<TaskCard\r\n\t\t\t\t\t\tdayIndex={dayIndex}\r\n\t\t\t\t\t\ttask={placement.task}\r\n\t\t\t\t\t\tkey={placement.task.id}\r\n\t\t\t\t\t/>\r\n\t\t\t\t) : (\r\n\t\t\t\t\t<EmptyCard key={index} />\r\n\t\t\t\t),\r\n\t\t\t)}\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport const Cell = (props: { dayIndex: number; person: Person }) => {\r\n\tconst { dayIndex, person } = props;\r\n\tconst [, drop] = useDrop<DropObject, {}, {}>({\r\n\t\taccept: 'card',\r\n\t\tdrop: (item: DropObject) => {\r\n\t\t\titem.task.moveTo(item.fromIndex, props.dayIndex, props.person);\r\n\t\t\treturn {};\r\n\t\t},\r\n\t});\r\n\r\n\tconst store = useStore();\r\n\r\n\tconst onFreeClick = useCallback(() => {\r\n\t\tstore.addTask(dayIndex, person);\r\n\t}, [dayIndex, person, store]);\r\n\r\n\treturn useObserver(() => {\r\n\t\tconst taskPlacements = store.getTaskPlacements(\r\n\t\t\tprops.dayIndex,\r\n\t\t\tprops.person,\r\n\t\t);\r\n\r\n\t\treturn (\r\n\t\t\t<td ref={drop} className='planner-cell planner-cell_task'>\r\n\t\t\t\t{taskPlacements.length === 0 ? (\r\n\t\t\t\t\t<div\r\n\t\t\t\t\t\tclassName='planner-card empty-card'\r\n\t\t\t\t\t\tonClick={onFreeClick}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{`Free`}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t) : (\r\n\t\t\t\t\t<TaskCardList\r\n\t\t\t\t\t\ttaskPlacements={taskPlacements}\r\n\t\t\t\t\t\tdayIndex={dayIndex}\r\n\t\t\t\t\t/>\r\n\t\t\t\t)}\r\n\t\t\t</td>\r\n\t\t);\r\n\t});\r\n};\r\n","import { useObserver } from 'mobx-react-lite';\r\nimport React from 'react';\r\n\r\nimport { Person } from '../stores';\r\nimport { useStore } from '../use-store';\r\nimport { Cell } from './cells/cell';\r\nimport { PersonCell } from './headers';\r\n\r\nexport const PersonTasksRow = (props: { person: Person }) => {\r\n\tconst { person } = props;\r\n\r\n\tconst store = useStore();\r\n\r\n\treturn useObserver(() => (\r\n\t\t<tr className='planner-table__row'>\r\n\t\t\t<PersonCell person={person} />\r\n\t\t\t{store.days.map((_day, index) => (\r\n\t\t\t\t<Cell key={index} dayIndex={index} person={person} />\r\n\t\t\t))}\r\n\t\t</tr>\r\n\t));\r\n};\r\n","import { useObserver } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { DndProvider } from 'react-dnd';\r\nimport Html5Backend from 'react-dnd-html5-backend';\r\n\r\nimport { Col, Row } from 'react-bootstrap';\r\nimport { useStore } from '../use-store';\r\nimport { DaysHeader } from './days-header';\r\nimport { PersonTasksRow } from './person-tasks-row';\r\nimport './table.css';\r\n\r\nconst TableRows = () => {\r\n\tconst store = useStore();\r\n\r\n\treturn useObserver(() => (\r\n\t\t<>\r\n\t\t\t{store.people.map(person => (\r\n\t\t\t\t<PersonTasksRow person={person} key={person.id} />\r\n\t\t\t))}\r\n\t\t</>\r\n\t));\r\n};\r\n\r\nexport const Table = () => {\r\n\treturn (\r\n\t\t<Row>\r\n\t\t\t<Col lg='12'>\r\n\t\t\t\t<DndProvider backend={Html5Backend}>\r\n\t\t\t\t\t<table className='planner-table'>\r\n\t\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t\t<DaysHeader />\r\n\t\t\t\t\t\t</thead>\r\n\t\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t\t<TableRows />\r\n\t\t\t\t\t\t</tbody>\r\n\t\t\t\t\t</table>\r\n\t\t\t\t</DndProvider>\r\n\t\t\t</Col>\r\n\t\t</Row>\r\n\t);\r\n};\r\n","import { useObserver } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button, Col, Row } from 'react-bootstrap';\r\n\r\nimport { useStore } from '../use-store';\r\n\r\nexport const AddPersonButton = () => {\r\n\tconst store = useStore();\r\n\r\n\treturn useObserver(() => (\r\n\t\t<Row>\r\n\t\t\t<Col lg='2'>\r\n\t\t\t\t<Button\r\n\t\t\t\t\tvariant='primary'\r\n\t\t\t\t\tonClick={store.addPerson}\r\n\t\t\t\t\ttitle='Add Person'\r\n\t\t\t\t>\r\n\t\t\t\t\tAdd Person\r\n\t\t\t\t</Button>\r\n\t\t\t</Col>\r\n\t\t</Row>\r\n\t));\r\n};\r\n","import { useObserver } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport {\r\n\tCol,\r\n\tFormControl,\r\n\tFormControlProps,\r\n\tFormGroup,\r\n\tRow,\r\n} from 'react-bootstrap';\r\n\r\nimport { Task } from '../stores';\r\nimport { useStore } from '../use-store';\r\n\r\nconst TaskEditorControls = (props: { task: Task }) => {\r\n\tconst task = props.task;\r\n\r\n\tconst setName = (event: React.FormEvent<FormControlProps>) => {\r\n\t\ttask.setName(event.currentTarget.value || '');\r\n\t};\r\n\r\n\treturn useObserver(() => (\r\n\t\t<FormGroup>\r\n\t\t\t<FormControl value={task.name} onChange={setName} />\r\n\t\t</FormGroup>\r\n\t));\r\n};\r\n\r\nexport const TaskEditor = () => {\r\n\tconst store = useStore();\r\n\r\n\treturn useObserver(() => (\r\n\t\t<Row>\r\n\t\t\t<Col lg='3'>\r\n\t\t\t\t{store.selectedTask && (\r\n\t\t\t\t\t<TaskEditorControls task={store.selectedTask} />\r\n\t\t\t\t)}\r\n\t\t\t</Col>\r\n\t\t</Row>\r\n\t));\r\n};\r\n","import React from 'react';\nimport { Col, Container, Navbar, Row } from 'react-bootstrap';\n\nimport { AddPersonButton, Table } from './table';\nimport { TaskEditor } from './task-editor';\nimport { StoreProvider } from './use-store';\n\nconst AppContainer: React.FC = props => {\n\tconst { children } = props;\n\n\treturn (\n\t\t<>\n\t\t\t<Navbar fixed='top' bg='dark' variant='dark' expand='lg'>\n\t\t\t\t<Navbar.Brand href='#home'>Planner</Navbar.Brand>\n\t\t\t</Navbar>\n\t\t\t<Container fluid={true}>{children}</Container>\n\t\t</>\n\t);\n};\n\nexport const App: React.FC = () => {\n\treturn (\n\t\t<StoreProvider>\n\t\t\t<AppContainer>\n\t\t\t\t<Table />\n\t\t\t\t<AddPersonButton />\n\t\t\t\t<TaskEditor />\n\t\t\t</AppContainer>\n\t\t</StoreProvider>\n\t);\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === '[::1]' ||\n\t\t// 127.0.0.1/8 is considered localhost for IPv4.\n\t\twindow.location.hostname.match(\n\t\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n\t\t),\n);\n\ninterface Config {\n\tonSuccess?: (registration: ServiceWorkerRegistration) => void;\n\tonUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config?: Config) {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(\n\t\t\t(process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n\t\t\twindow.location.href,\n\t\t);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t\t\t'worker. To learn more, visit https://bit.ly/CRA-PWA',\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then(registration => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated pre-cached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\n\t\t\t\t\t\t\t\t\t'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been pre-cached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl)\n\t\t.then(response => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get('content-type');\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\t(contentType != null &&\n\t\t\t\t\tcontentType.indexOf('javascript') === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log(\n\t\t\t\t'No internet connection found. App is running in offline mode.',\n\t\t\t);\n\t\t});\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\tregistration.unregister();\n\t\t});\n\t}\n}\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './app';\nimport './index.css';\nimport * as serviceWorker from './service-worker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}